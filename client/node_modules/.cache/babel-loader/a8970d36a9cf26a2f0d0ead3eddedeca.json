{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\webdevidk\\\\engage\\\\000\\\\pexen2\\\\pexen\\\\client\\\\src\\\\App.js\";\nimport { render } from '@testing-library/react'; // import React from 'react'\n\nimport React, { Component } from 'react'; // import React from 'react';\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Landing from './routes/Landing';\nimport TestLink from './routes/exam/TestLink';\nimport StartTest from './routes/exam/StartTest';\nimport Result from './routes/exam/Result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst auth = getAuth();\n\nconst signInWithGoogle = () => {\n  const provider = new GoogleAuthProvider();\n};\n\nsignInWithPopup(auth, provider).then(result => {\n  // This gives you a Google Access Token. You can use it to access the Google API.\n  const credential = GoogleAuthProvider.credentialFromResult(result);\n  const token = credential.accessToken; // The signed-in user info.\n\n  const user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  const errorCode = error.code;\n  const errorMessage = error.message; // The email of the user's account used.\n\n  const email = error.customData.email; // The AuthCredential type that was used.\n\n  const credential = GoogleAuthProvider.credentialFromError(error); // ...\n});\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/home\",\n          element: /*#__PURE__*/_jsxDEV(Landing, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 56\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/testlink\",\n          component: /*#__PURE__*/_jsxDEV(TestLink, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 56\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/starttest/:testid\",\n          component: /*#__PURE__*/_jsxDEV(StartTest, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/result/:testid\",\n          component: /*#__PURE__*/_jsxDEV(Result, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 62\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["render","React","Component","getAuth","signInWithPopup","GoogleAuthProvider","BrowserRouter","Router","Routes","Route","Landing","TestLink","StartTest","Result","auth","signInWithGoogle","provider","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","App"],"sources":["D:/Code/webdevidk/engage/000/pexen2/pexen/client/src/App.js"],"sourcesContent":["import { render } from '@testing-library/react'\r\n// import React from 'react'\r\nimport React, { Component } from 'react';\r\n// import React from 'react';\r\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Landing from './routes/Landing';\r\nimport TestLink from './routes/exam/TestLink';\r\nimport StartTest from './routes/exam/StartTest';\r\nimport Result from './routes/exam/Result';\r\n\r\nconst auth = getAuth();\r\nconst signInWithGoogle = () => {\r\n    const provider = new GoogleAuthProvider();\r\n}\r\n\r\nsignInWithPopup(auth, provider)\r\n  .then((result) => {\r\n    // This gives you a Google Access Token. You can use it to access the Google API.\r\n    const credential = GoogleAuthProvider.credentialFromResult(result);\r\n    const token = credential.accessToken;\r\n    // The signed-in user info.\r\n    const user = result.user;\r\n    // ...\r\n  }).catch((error) => {\r\n    // Handle Errors here.\r\n    const errorCode = error.code;\r\n    const errorMessage = error.message;\r\n    // The email of the user's account used.\r\n    const email = error.customData.email;\r\n    // The AuthCredential type that was used.\r\n    const credential = GoogleAuthProvider.credentialFromError(error);\r\n    // ...\r\n  });\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Routes>\r\n                    <Route exact path=\"/home\" element={<Landing />} />\r\n                    <Route path=\"/testlink\" component={<TestLink />} />\r\n                    <Route path=\"/starttest/:testid\" component={<StartTest />} />\r\n                    <Route path=\"/result/:testid\" component={<Result />} />\r\n                </Routes>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default App;"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB,C,CACA;;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,QAA6D,eAA7D;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AAEA,MAAMC,IAAI,GAAGX,OAAO,EAApB;;AACA,MAAMY,gBAAgB,GAAG,MAAM;EAC3B,MAAMC,QAAQ,GAAG,IAAIX,kBAAJ,EAAjB;AACH,CAFD;;AAIAD,eAAe,CAACU,IAAD,EAAOE,QAAP,CAAf,CACGC,IADH,CACSC,MAAD,IAAY;EAChB;EACA,MAAMC,UAAU,GAAGd,kBAAkB,CAACe,oBAAnB,CAAwCF,MAAxC,CAAnB;EACA,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHgB,CAIhB;;EACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB,CALgB,CAMhB;AACD,CARH,EAQKC,KARL,CAQYC,KAAD,IAAW;EAClB;EACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;EACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHkB,CAIlB;;EACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CALkB,CAMlB;;EACA,MAAMX,UAAU,GAAGd,kBAAkB,CAAC2B,mBAAnB,CAAuCP,KAAvC,CAAnB,CAPkB,CAQlB;AACD,CAjBH;;AAoBA,MAAMQ,GAAN,SAAkB/B,SAAlB,CAA4B;EAIxBF,MAAM,GAAG;IACL,oBACI;MAAA,uBACI,QAAC,MAAD;QAAA,wBACI,QAAC,KAAD;UAAO,KAAK,MAAZ;UAAa,IAAI,EAAC,OAAlB;UAA0B,OAAO,eAAE,QAAC,OAAD;YAAA;YAAA;YAAA;UAAA;QAAnC;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI,QAAC,KAAD;UAAO,IAAI,EAAC,WAAZ;UAAwB,SAAS,eAAE,QAAC,QAAD;YAAA;YAAA;YAAA;UAAA;QAAnC;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI,QAAC,KAAD;UAAO,IAAI,EAAC,oBAAZ;UAAiC,SAAS,eAAE,QAAC,SAAD;YAAA;YAAA;YAAA;UAAA;QAA5C;UAAA;UAAA;UAAA;QAAA,QAHJ,eAII,QAAC,KAAD;UAAO,IAAI,EAAC,iBAAZ;UAA8B,SAAS,eAAE,QAAC,MAAD;YAAA;YAAA;YAAA;UAAA;QAAzC;UAAA;UAAA;UAAA;QAAA,QAJJ;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ;EAUH;;AAfuB;;AAoB5B,eAAeiC,GAAf"},"metadata":{},"sourceType":"module"}