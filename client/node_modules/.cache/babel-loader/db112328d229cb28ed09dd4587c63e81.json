{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\webdevidk\\\\engage\\\\000\\\\pexen2\\\\pexen\\\\client\\\\src\\\\app.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Landing from './routes/Landing';\nimport TestLink from './routes/exam/TestLink';\nimport StartTest from './routes/exam/StartTest';\nimport Result from './routes/exam/Result';\nimport { authentication } from './firebase-config';\nimport { signInWithPopup, GoogleAuthProvider } from 'firebase/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet signInWithGoogle;\n\nfunction App() {\n  const signInWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    signInWithPopup(authentication, provider).then(result => {\n      // This gives you a Google Access Token. You can use it to access the Google API.\n      const credential = GoogleAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken; // The signed-in user info.\n\n      const user = result.user; // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.customData.email; // The AuthCredential type that was used.\n\n      const credential = GoogleAuthProvider.credentialFromError(error); // ...\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/home\",\n        element: /*#__PURE__*/_jsxDEV(Landing, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/testlink\",\n        component: /*#__PURE__*/_jsxDEV(TestLink, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/starttest/:testid\",\n        component: /*#__PURE__*/_jsxDEV(StartTest, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 61\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/result/:testid\",\n        component: /*#__PURE__*/_jsxDEV(Result, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 58\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_c = App;\nexport default App;\nex;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","BrowserRouter","Router","Routes","Route","Landing","TestLink","StartTest","Result","authentication","signInWithPopup","GoogleAuthProvider","signInWithGoogle","App","provider","then","result","credential","credentialFromResult","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError","ex"],"sources":["D:/Code/webdevidk/engage/000/pexen2/pexen/client/src/app.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\r\nimport Landing from './routes/Landing';\r\nimport TestLink from './routes/exam/TestLink';\r\nimport StartTest from './routes/exam/StartTest';\r\nimport Result from './routes/exam/Result';\r\nimport { authentication } from './firebase-config';\r\nimport {signInWithPopup, GoogleAuthProvider} from 'firebase/auth';\r\n\r\nlet signInWithGoogle;\r\n\r\nfunction App() {\r\n\r\n    const signInWithGoogle = () =>{\r\n        const provider = new GoogleAuthProvider();\r\n        signInWithPopup(authentication,provider)\r\n        .then((result) => {\r\n            // This gives you a Google Access Token. You can use it to access the Google API.\r\n            const credential = GoogleAuthProvider.credentialFromResult(result);\r\n            const token = credential.accessToken;\r\n            // The signed-in user info.\r\n            const user = result.user;\r\n            // ...\r\n        }).catch((error) => {\r\n            // Handle Errors here.\r\n            const errorCode = error.code;\r\n            const errorMessage = error.message;\r\n            // The email of the user's account used.\r\n            const email = error.customData.email;\r\n            // The AuthCredential type that was used.\r\n            const credential = GoogleAuthProvider.credentialFromError(error);\r\n            // ...\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Routes>\r\n                <Route exact path=\"/home\" element={<Landing />} />\r\n                <Route path=\"/testlink\" component={<TestLink />} />\r\n                <Route path=\"/starttest/:testid\" component={<StartTest />} />\r\n                <Route path=\"/result/:testid\" component={<Result />} />\r\n            </Routes>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\nex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,QAAuD,kBAAvD;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,QAAkD,eAAlD;;AAEA,IAAIC,gBAAJ;;AAEA,SAASC,GAAT,GAAe;EAEX,MAAMD,gBAAgB,GAAG,MAAK;IAC1B,MAAME,QAAQ,GAAG,IAAIH,kBAAJ,EAAjB;IACAD,eAAe,CAACD,cAAD,EAAgBK,QAAhB,CAAf,CACCC,IADD,CACOC,MAAD,IAAY;MACd;MACA,MAAMC,UAAU,GAAGN,kBAAkB,CAACO,oBAAnB,CAAwCF,MAAxC,CAAnB;MACA,MAAMG,KAAK,GAAGF,UAAU,CAACG,WAAzB,CAHc,CAId;;MACA,MAAMC,IAAI,GAAGL,MAAM,CAACK,IAApB,CALc,CAMd;IACH,CARD,EAQGC,KARH,CAQUC,KAAD,IAAW;MAChB;MACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B,CAHgB,CAIhB;;MACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAN,CAAiBD,KAA/B,CALgB,CAMhB;;MACA,MAAMX,UAAU,GAAGN,kBAAkB,CAACmB,mBAAnB,CAAuCP,KAAvC,CAAnB,CAPgB,CAQhB;IACH,CAjBD;EAkBH,CApBD;;EAuBA,oBACI;IAAA,uBACI,QAAC,MAAD;MAAA,wBACI,QAAC,KAAD;QAAO,KAAK,MAAZ;QAAa,IAAI,EAAC,OAAlB;QAA0B,OAAO,eAAE,QAAC,OAAD;UAAA;UAAA;UAAA;QAAA;MAAnC;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,KAAD;QAAO,IAAI,EAAC,WAAZ;QAAwB,SAAS,eAAE,QAAC,QAAD;UAAA;UAAA;UAAA;QAAA;MAAnC;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI,QAAC,KAAD;QAAO,IAAI,EAAC,oBAAZ;QAAiC,SAAS,eAAE,QAAC,SAAD;UAAA;UAAA;UAAA;QAAA;MAA5C;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII,QAAC,KAAD;QAAO,IAAI,EAAC,iBAAZ;QAA8B,SAAS,eAAE,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA;MAAzC;QAAA;QAAA;QAAA;MAAA,QAJJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAUH;;KAnCQV,G;AAuCT,eAAeA,GAAf;AAEAkB,EAAE"},"metadata":{},"sourceType":"module"}